pub enum Document {
    Prolog {
        xml_decl: Option<XmlDecl>,
        misc: Option<Vec<Misc>>,
        doc_type: Option<DocType>,
    },
    Element(Tag, Box<Document>, Tag),
    Content(Option<String>),
    Nested(Vec<Document>),
    Empty,
    EmptyTag(Tag),
    ProcessingInstruction(ProcessingInstruction),
    Comment(String),
    CDATA(String),
}
pub enum TagState {
    Start,
    End,
    Empty,
}
pub struct Tag {
    pub name: Name,
    pub attributes: Option<Vec<Attribute>>, // Attribute::Instance
    pub state: TagState,
}
pub struct DocType {
    pub name: Name,
    pub external_id: Option<ExternalID>,
    pub int_subset: Option<Vec<InternalSubset>>,
}
pub enum EntityValue {
    Document(Document),
    Value(String),
    Reference(Reference),
    ParameterReference(Reference),
    InternalSubset(Box<InternalSubset>),
}

pub enum EntityDecl {
    General(GeneralEntityDeclaration),
    Parameter(ParameterEntityDeclaration),
}
pub struct EntityDeclaration {
    pub name: Name,
    pub entity_def: EntityDefinition,
}
pub type GeneralEntityDeclaration = EntityDeclaration;
pub type ParameterEntityDeclaration = EntityDeclaration;

pub enum EntityDefinition {
    EntityValue(EntityValue),
    External {
        id: ExternalID,
        n_data: Option<Name>,
    },
}

pub struct EntityDeclaration {
    pub name: Name,
    pub entity_def: EntityDefinition,
}
pub type GeneralEntityDeclaration = EntityDeclaration;
pub type ParameterEntityDeclaration = EntityDeclaration;

pub enum ID {
    ExternalID(ExternalID),
    PublicID(String),
}
pub enum InternalSubset {
    Element {
        name: QualifiedName,
        content_spec: Option<DeclarationContent>,
    },
    AttList {
        name: QualifiedName,
        att_defs: Option<Vec<Attribute>>,
    },
    Notation {
        name: QualifiedName,
        id: ID,
    },
    Entity(EntityDeclaration),
    DeclSep(Reference),
    ProcessingInstruction(ProcessingInstruction),
    Comment(Document),
}
pub enum Standalone {
    Yes,
    No,
}
pub enum DeclarationContent {
    Mixed(Mixed),
    Children(ContentParticle),
    Empty,
    Any,
}
pub enum Mixed {
    PCDATA {
        names: Option<Vec<QualifiedName>>,
        parsed: bool,
    },
}
pub struct XmlDecl {
    pub version: String,
    pub encoding: Option<String>,
    pub standalone: Option<Standalone>,
}
pub struct QualifiedName {
    pub prefix: Option<String>,
    pub local_part: String,
}
pub type Name = QualifiedName;
pub enum Prefix {
    Default,
    Prefix(String),
}
pub enum Attribute {
    Definition {
        name: QualifiedName,
        att_type: AttType,
        default_decl: DefaultDecl,
    },
    Reference(Reference),
    Instance {
        name: QualifiedName,
        value: String,
    },
    Required,
    Implied,
    Namespace {
        prefix: Prefix,
        uri: String,
    },
}
pub enum TokenizedType {
    ID,
    IDREF,
    IDREFS,
    ENTITY,
    ENTITIES,
    NMTOKEN,
    NMTOKENS,
}
pub enum AttType {
    CDATA,
    Tokenized(TokenizedType),
    Enumerated {
        notation: Option<Vec<Name>>,
        enumeration: Option<Vec<String>>,
    },
}
pub enum DefaultDecl {
    Required,
    Implied,
    Fixed(String),
    Value(String),
}
pub enum ConditionalState {
    None,
    Optional,
    ZeroOrMore,
    OneOrMore,
}
pub enum ContentParticle {
    Name(QualifiedName, ConditionalState),
    Choice(Vec<ContentParticle>, ConditionalState),
    Sequence(Vec<ContentParticle>, ConditionalState),
}
pub enum ExternalID {
    System(String),
    Public {
        pubid: String,
        system_identifier: Box<ExternalID>, // Box<ExternalID::System>
    },
}
pub struct ProcessingInstruction {
    pub target: Name,
    pub data: Option<String>,
}
pub enum Reference {
    EntityRef(Name),
    CharRef { value: String },
}
